// Generated by CoffeeScript 1.6.2
var EventEmitter, RedisStore, redis,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

redis = require("redis");

EventEmitter = require('events').EventEmitter;

/**
 * Redis store
 * https://github.com/mranney/node_redis
*/


RedisStore = (function(_super) {
  __extends(RedisStore, _super);

  /**
   * @param options.key - basic key to store assets
  */


  function RedisStore(port, host, options) {
    var _this = this;

    if (options == null) {
      options = {};
    }
    this.assetsKey = options.key || 'redis_assets';
    this.assetsChannel = options.redis_assets_channel || 'redis_assets_channel';
    this.logger = options.logger;
    if (this.logger == null) {
      this.logger = console;
    }
    this.assets = {};
    this.redis = redis.createClient(port, host, options);
    this.notify = redis.createClient(port, host, options);
    this.notify.subscribe(this.assetsChannel);
    this.notify.on("message", function(channel, key) {
      return _this._update();
    });
    this._update();
  }

  RedisStore.prototype._update = function() {
    var _this = this;

    return this.redis.hgetall(this.assetsKey, function(err, assets) {
      var asset, key;

      if (err != null) {
        if ((err != null) && (_this.logger != null)) {
          _this.logger.error("Error hgetall", err);
        }
        _this.emit('error', err);
        return;
      }
      for (key in assets) {
        asset = assets[key];
        try {
          _this.assets[key] = JSON.parse(asset);
        } catch (_error) {
          err = _error;
          if (_this.logger != null) {
            _this.logger.error("Error JSON.parse", err);
          }
        }
      }
      return _this.emit('ready');
    });
  };

  RedisStore.prototype.set = function(key, asset) {
    var _this = this;

    this.assets[key] = asset;
    return this.redis.hset(this.assetsKey, key, JSON.stringify(asset), function(err) {
      if ((err != null) && (_this.logger != null)) {
        return _this.logger.error("Error JSON.hset", err);
      }
      return _this.redis.publish(_this.assetsChannel, process.pid);
    });
  };

  RedisStore.prototype.get = function(key) {
    return this.assets[key];
  };

  RedisStore.prototype.destroy = function(key, cb) {
    var _this = this;

    return this.redis.hdel(this.assetsKey, key, function(err) {
      if ((err != null) && (_this.logger != null)) {
        _this.logger.error("Error JSON.hdel", err);
      } else {
        delete _this.assets[key];
      }
      if (cb != null) {
        return cb(err);
      }
    });
  };

  return RedisStore;

})(EventEmitter);

module.exports = RedisStore;
