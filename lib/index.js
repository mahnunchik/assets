// Generated by CoffeeScript 1.6.2
var Assets, Store, crypto, fs, glob, mime, mkdirp, path, stylesheetAssetUrlPattern, _;

fs = require('fs');

path = require('path');

crypto = require('crypto');

mime = require('mime');

mkdirp = require('mkdirp');

glob = require('glob');

_ = require('underscore');

Store = require('./store/Store');

stylesheetAssetUrlPattern = /url\([\'\"]?([^\?\#\'\"\)]+)([^\'\"\)]*)[\'\"]?\)/gi;

Assets = (function() {
  /**
   * @param options.assetsDir
   * @param options.rootURI
   * @param options.logger
   * @param options.store
  */
  function Assets(options) {
    if (options == null) {
      options = {};
    }
    this.store = options.store || new Store();
    this.assetsDir = options.assetsDir || path.join(process.cwd(), 'assets');
    this.rootURI = options.rootURI || '/';
    this.logger = options.logger;
    if (this.logger == null) {
      this.logger = console;
    }
    if (!fs.existsSync(this.assetsDir)) {
      mkdirp.sync(this.assetsDir);
    }
  }

  Assets.prototype.handle = function(req, res, next) {
    res.locals({
      assets: this
    });
    return next();
  };

  Assets.prototype._make = function(key, filename, options) {
    var asset, base, content, dest, ext, md5, mimetype, name, url;

    ext = path.extname(filename);
    base = path.basename(filename, ext);
    mimetype = options.mimetype || mime.lookup(ext);
    if (!fs.existsSync(filename)) {
      if (this.logger) {
        this.logger.error("File '" + filename + "' not exists");
      }
      return;
    }
    content = fs.readFileSync(filename);
    if (mimetype === 'text/css') {
      content = this._fixCssUrl(filename, content);
    }
    name = base;
    if (options.hash !== false) {
      md5 = crypto.createHash('md5').update(content).digest('hex');
      name = "" + name + "-" + md5;
    }
    name = "" + name + ext;
    dest = path.join(this.assetsDir, name);
    fs.writeFileSync(dest, content);
    url = path.join(options.rootURI, name);
    asset = {
      filename: filename,
      path: dest,
      mimetype: mimetype,
      url: url,
      timestamp: new Date().toString()
    };
    this.store.set(key, asset);
    if (this.logger) {
      this.logger.info("Created asset '" + dest + "' for key '" + key + "'");
    }
    return asset;
  };

  Assets.prototype.make = function(key, filename, options) {
    var opts, _key, _ref, _ref1;

    if (_.isObject(key)) {
      for (_key in key) {
        opts = key[_key];
        this.make(_key, opts.file, opts);
      }
      return;
    }
    if (filename == null) {
      filename = key;
    }
    options = options || {};
    if ((_ref = options.assetsDir) == null) {
      options.assetsDir = this.assetsDir;
    }
    if ((_ref1 = options.rootURI) == null) {
      options.rootURI = this.rootURI;
    }
    return this._make(key, filename, options);
  };

  Assets.prototype.dir = function(pattern, options) {
    var file, filename, files, globOptions, prefix, _i, _len, _results;

    if (options == null) {
      options = {};
    }
    globOptions = {};
    if (options.baseDir != null) {
      globOptions['cwd'] = options.baseDir;
    }
    files = glob.sync(pattern, globOptions);
    prefix = options.prefix != null ? options.prefix : '';
    _results = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      filename = options.baseDir != null ? path.join(options.baseDir, file) : file;
      _results.push(this.make("" + prefix + file, filename, options));
    }
    return _results;
  };

  /*
  _resolveUrl: (filename, url)->
    url = url.replace(/url\(|'|"|\)/g, '')
    url = path.join(path.dirname(filename), url)
    return @url(url)
  
  
  _fixCssUrl: (filename, content)->
    content = content.toString()
    results = content.match /url\([^\)]+\)/g
    if results
      for result in results
        url = @_resolveUrl(filename, result)
        if url != ''
          content = content.replace result, "url('#{url}')"
    return content
  */


  Assets.prototype._fixCssUrl = function(filenameCSS, content) {
    var _this = this;

    content = content.toString();
    content = content.replace(stylesheetAssetUrlPattern, function(src, file, suffix) {
      var filePath, url;

      filePath = path.join(path.dirname(filenameCSS), file);
      url = _this.url(filePath);
      if (url !== '') {
        return "url(\"" + url + suffix + "\")";
      } else {
        return src;
      }
    });
    return content;
  };

  Assets.prototype._get = function(key) {
    var asset;

    if (!this.store.get(key)) {
      if (this.logeer) {
        this.logger.info("trying to create on-demand asset '" + key + "'");
      }
      this.make(key);
    }
    asset = this.store.get(key);
    if (asset != null) {
      return asset;
    }
    if (this.loggger) {
      this.logger.error("Asset not found, key: '" + key + "'");
    }
    return {};
  };

  Assets.prototype.url = function(key) {
    return this._get(key).url || '';
  };

  Assets.prototype.tag = function(key) {
    var asset;

    asset = this._get(key);
    switch (asset.mimetype) {
      case 'text/javascript':
      case 'application/javascript':
        return "\n<script type=\"" + asset.mimetype + "\" src=\"" + asset.url + "\"></script>";
      case 'text/css':
        return "\n<link rel=\"stylesheet\" href=\"" + asset.url + "\">";
      default:
        return asset.url || '';
    }
  };

  return Assets;

})();

module.exports = function(options) {
  return new Assets(options);
};

module.exports.Store = Store;

module.exports.RedisStore = require('./store/RedisStore');
